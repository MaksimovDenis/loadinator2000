// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: loader.proto

package loader_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoaderV1Client is the client API for LoaderV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoaderV1Client interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type loaderV1Client struct {
	cc grpc.ClientConnInterface
}

func NewLoaderV1Client(cc grpc.ClientConnInterface) LoaderV1Client {
	return &loaderV1Client{cc}
}

func (c *loaderV1Client) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/note_v1.LoaderV1/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loaderV1Client) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/note_v1.LoaderV1/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loaderV1Client) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/note_v1.LoaderV1/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoaderV1Server is the server API for LoaderV1 service.
// All implementations must embed UnimplementedLoaderV1Server
// for forward compatibility
type LoaderV1Server interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedLoaderV1Server()
}

// UnimplementedLoaderV1Server must be embedded to have forward compatible implementations.
type UnimplementedLoaderV1Server struct {
}

func (UnimplementedLoaderV1Server) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLoaderV1Server) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedLoaderV1Server) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLoaderV1Server) mustEmbedUnimplementedLoaderV1Server() {}

// UnsafeLoaderV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoaderV1Server will
// result in compilation errors.
type UnsafeLoaderV1Server interface {
	mustEmbedUnimplementedLoaderV1Server()
}

func RegisterLoaderV1Server(s grpc.ServiceRegistrar, srv LoaderV1Server) {
	s.RegisterService(&LoaderV1_ServiceDesc, srv)
}

func _LoaderV1_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoaderV1Server).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_v1.LoaderV1/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoaderV1Server).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoaderV1_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoaderV1Server).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_v1.LoaderV1/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoaderV1Server).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoaderV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoaderV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_v1.LoaderV1/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoaderV1Server).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoaderV1_ServiceDesc is the grpc.ServiceDesc for LoaderV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoaderV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "note_v1.LoaderV1",
	HandlerType: (*LoaderV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LoaderV1_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _LoaderV1_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LoaderV1_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loader.proto",
}
